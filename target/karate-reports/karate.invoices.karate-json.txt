{"failedCount":1,"prefixedPath":"classpath:karate\/invoices.feature","packageQualifiedName":"karate.invoices","loopIndex":-1,"relativePath":"karate\/invoices.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4","millis":0.0,"status":"failed"},"step":{"background":true,"line":4,"prefix":"*","index":0,"text":"url karate.config.baseUrl"},"stepLog":"14:08:00.019 classpath:karate\/invoices.feature:4\n* url karate.config.baseUrl\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\n","callResults":[{"prefixedPath":"classpath:karate\/okta-auth.feature","loopIndex":-1,"callDepth":1,"description":"","resultDate":"2024-07-17 02:08:00 PM","durationMillis":100.895125,"callArg":{"basicAuth":"MG9hMW9wY2RjdmdRNHVuaFUwaDg6NllZeGwyMXVQXzFIQnd2ZzBweXFNZ0dYVUlJSklWcE12cnR5NXlqMzgtMzJnUVRsVGRrNUlVLUhWVmhoM05acQ==","oktaTokenUrl":null,"oktaScopes":"fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers"},"failedCount":1,"packageQualifiedName":"karate.okta-auth","relativePath":"karate\/okta-auth.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":3821667,"millis":3.821667,"status":"passed"},"step":{"background":true,"line":4,"prefix":"*","index":0,"text":"def basicAuth = karate.properties['basicAuth']"},"stepLog":"14:07:59.269 Initial config: {\n  \"baseUrl\": \"https:\/\/invoices-rpis.finance-test.cfadevelop.com\/\",\n  \"apiEnvironment\": \"dev\",\n  \"oktaScopes\": \"fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers\"\n}\n \n14:07:59.270 Executing command: aws secretsmanager get-secret-value --secret-id dev-ots-rpis-xp-api-okta --query SecretString --output text \n14:07:59.893 Okta credentials JSON: {\"okta-client-id\":\"0oa1opcdcvgQ4unhU0h8\",\"okta-client-secret\":\"6YYxl21uP_1HBwvg0pyqMgGXUIIJIVpMvrty5yj38-32gQTlTdk5IU-HVVhh3NZq\"} \n14:07:59.896 Parsed Okta credentials: {\n  \"okta-client-id\": \"0oa1opcdcvgQ4unhU0h8\",\n  \"okta-client-secret\": \"6YYxl21uP_1HBwvg0pyqMgGXUIIJIVpMvrty5yj38-32gQTlTdk5IU-HVVhh3NZq\"\n}\n \n14:07:59.900 Basic Auth header: MG9hMW9wY2RjdmdRNHVuaFUwaDg6NllZeGwyMXVQXzFIQnd2ZzBweXFNZ0dYVUlJSklWcE12cnR5NXlqMzgtMzJnUVRsVGRrNUlVLUhWVmhoM05acQ== \n"},{"result":{"nanos":500209,"millis":0.500209,"status":"passed"},"step":{"background":true,"line":5,"prefix":"*","index":1,"text":"def oktaTokenUrl = karate.properties['oktaTokenUrl']"}},{"result":{"nanos":416416,"millis":0.416416,"status":"passed"},"step":{"background":true,"line":6,"prefix":"*","index":2,"text":"def oktaScopes = karate.properties['oktaScopes']"}},{"result":{"nanos":536708,"millis":0.536708,"status":"passed"},"step":{"line":9,"prefix":"Given","index":0,"text":"url oktaTokenUrl"}},{"result":{"nanos":5341625,"millis":5.341625,"status":"passed"},"step":{"line":10,"prefix":"And","index":1,"text":"request { grant_type: 'client_credentials', scope: oktaScopes }"}},{"result":{"nanos":1403250,"millis":1.40325,"status":"passed"},"step":{"line":11,"prefix":"And","index":2,"text":"header Authorization = 'Basic ' + basicAuth"}},{"result":{"nanos":88875250,"errorMessage":"http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12","millis":88.87525,"status":"failed"},"step":{"line":12,"prefix":"When","index":3,"text":"method POST"},"stepLog":"14:08:00.014 org.apache.http.ProtocolException: Target host is not specified, http call failed after 72 milliseconds for url: \n14:08:00.014 classpath:karate\/okta-auth.feature:12\nWhen method POST\nhttp call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":13,"prefix":"Then","index":4,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":14,"prefix":"And","index":5,"text":"def access_token = response.access_token"}}],"line":8,"description":"","durationMillis":100.895125,"failed":true,"error":"http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12","executorName":"main","name":"Get access token","startTime":1721243279908,"refId":"[1:8]","endTime":1721243280014,"exampleIndex":-1}],"name":"Okta Authentication","passedCount":0}]},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7","millis":0.0,"status":"failed"},"step":{"line":7,"prefix":"Given","index":0,"text":"path 'api\/invoices'"},"stepLog":"14:08:00.019 classpath:karate\/invoices.feature:7\nGiven path 'api\/invoices'\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8","millis":0.0,"status":"failed"},"step":{"line":8,"prefix":"When","index":1,"text":"method get"},"stepLog":"14:08:00.019 classpath:karate\/invoices.feature:8\nWhen method get\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9","millis":0.0,"status":"failed"},"step":{"line":9,"prefix":"Then","index":2,"text":"status 200"},"stepLog":"14:08:00.019 classpath:karate\/invoices.feature:9\nThen status 200\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10","millis":0.0,"status":"failed"},"step":{"line":10,"prefix":"And","index":3,"text":"print 'Response:', response"},"stepLog":"14:08:00.020 classpath:karate\/invoices.feature:10\nAnd print 'Response:', response\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11","millis":0.0,"status":"failed"},"step":{"line":11,"prefix":"And","index":4,"text":"assert response != null"},"stepLog":"14:08:00.020 classpath:karate\/invoices.feature:11\nAnd assert response != null\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12","millis":0.0,"status":"failed"},"step":{"line":12,"prefix":"And","index":5,"text":"assert response.length > 0"},"stepLog":"14:08:00.020 classpath:karate\/invoices.feature:12\nAnd assert response.length > 0\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12\nclasspath:karate\/invoices.feature:13","millis":0.0,"status":"failed"},"step":{"line":13,"prefix":"*","index":6,"text":"match response[0].id == '#string'"},"stepLog":"14:08:00.021 classpath:karate\/invoices.feature:13\n* match response[0].id == '#string'\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12\nclasspath:karate\/invoices.feature:13\n"},{"result":{"nanos":0,"errorMessage":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12\nclasspath:karate\/invoices.feature:13\nclasspath:karate\/invoices.feature:14","millis":0.0,"status":"failed"},"step":{"line":14,"prefix":"*","index":7,"text":"match response[0].amount == '#number'"},"stepLog":"14:08:00.021 classpath:karate\/invoices.feature:14\n* match response[0].amount == '#number'\n>> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12\nclasspath:karate\/invoices.feature:13\nclasspath:karate\/invoices.feature:14\n"}],"line":6,"description":"","durationMillis":0.0,"failed":true,"error":">> classpath:karate\/invoices.feature:6\n>> karate-config.js failed\n>> http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\njs failed:\n>>>>\n01: function fn() {\n02:   var config = {\n03:       baseUrl: 'https:\/\/invoices-rpis.finance-test.cfadevelop.com\/',\n04:       apiEnvironment: 'dev',\n05:       oktaScopes: 'fcr-api:read-invoice-suppliers fcr-api:publish-invoice-supplier-entity-types fcr-api:publish-invoice-suppliers'\n06:   };\n07: \n08:   karate.log('Initial config:', config);\n09: \n10:   function execCommand(command) {\n11:       var proc = java.lang.Runtime.getRuntime().exec(command);\n12:       proc.waitFor();\n13:       var reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream()));\n14:       var line = '';\n15:       var output = '';\n16:       while ((line = reader.readLine()) != null) {\n17:           output += line;\n18:       }\n19:       return output;\n20:   }\n21: \n22:   var secretName = config.apiEnvironment + '-ots-rpis-xp-api-okta';\n23:   var command = 'aws secretsmanager get-secret-value --secret-id ' + secretName + ' --query SecretString --output text';\n24:   karate.log('Executing command:', command);\n25: \n26:   var oktaCredsJson = execCommand(command);\n27:   karate.log('Okta credentials JSON:', oktaCredsJson);\n28: \n29:   if (!oktaCredsJson) {\n30:       karate.log('Failed to retrieve Okta secrets from Secrets Manager');\n31:       throw 'Failed to retrieve Okta secrets';\n32:   }\n33: \n34:   var oktaCreds = JSON.parse(oktaCredsJson);\n35:   karate.log('Parsed Okta credentials:', oktaCreds);\n36: \n37:   var oktaClientId = oktaCreds['okta-client-id'];\n38:   var oktaClientSecret = oktaCreds['okta-client-secret'];\n39:   var oktaTokenUrl = oktaCreds['okta-token-url'];\n40: \n41:   var basicAuth = java.util.Base64.getEncoder().encodeToString((oktaClientId + ':' + oktaClientSecret).getBytes('utf-8'));\n42:   karate.log('Basic Auth header:', basicAuth);\n43: \n44:   var tokenResponse = karate.call('classpath:karate\/okta-auth.feature', {\n45:       basicAuth: basicAuth,\n46:       oktaTokenUrl: oktaTokenUrl,\n47:       oktaScopes: config.oktaScopes\n48:   });\n49:   karate.log('Token response:', tokenResponse);\n50: \n51:   if (!tokenResponse || !tokenResponse.access_token) {\n52:       karate.log('Failed to get access token from Okta');\n53:       throw 'Failed to get access token from Okta';\n54:   }\n55: \n56:   config.accessToken = tokenResponse.access_token;\n57:   karate.log('Access token:', config.accessToken);\n58: \n59:   karate.configure('httpClientInstance', { readTimeout: 60000 });\n60: \n61:   return config;\n62: }\n<<<<\norg.graalvm.polyglot.PolyglotException: http call failed after 72 milliseconds for url: \nclasspath:karate\/okta-auth.feature:12\n- com.intuit.karate.core.FeatureResult.getErrorMessagesCombined(FeatureResult.java:215)\n- com.intuit.karate.core.ScenarioEngine.callFeature(ScenarioEngine.java:1951)\n- com.intuit.karate.core.ScenarioEngine.call(ScenarioEngine.java:1849)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:163)\n- com.intuit.karate.core.ScenarioBridge.call(ScenarioBridge.java:153)\n- <js>.fn(Unnamed:44)\n\nclasspath:karate\/invoices.feature:4\nclasspath:karate\/invoices.feature:7\nclasspath:karate\/invoices.feature:8\nclasspath:karate\/invoices.feature:9\nclasspath:karate\/invoices.feature:10\nclasspath:karate\/invoices.feature:11\nclasspath:karate\/invoices.feature:12\nclasspath:karate\/invoices.feature:13\nclasspath:karate\/invoices.feature:14","executorName":"main","name":"Get all invoices","startTime":1721243279209,"refId":"[1:6]","endTime":1721243280021,"exampleIndex":-1}],"callDepth":0,"name":"Invoices API","description":"","resultDate":"2024-07-17 02:08:00 PM","durationMillis":0.0,"passedCount":0}